
-- CleanUI - A UI Library for Lua/Roblox
-- Similar to Rayfield but with custom implementation

local CleanUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local RunService = game:GetService("RunService")
local TextService = game:GetService("TextService")
local ContentProvider = game:GetService("ContentProvider")

-- Configuration
local Config = {
    WindowName = "CleanUI",
    Color = Color3.fromRGB(35, 110, 235),
    Keybind = Enum.KeyCode.RightControl
}

-- Instances and Data
local ScreenGui = Instance.new("ScreenGui")
local Main = Instance.new("Frame")
local Windows = {}
local CurrentWindow = nil
local DragConnection = nil
local ToggleConnection = nil
local Minimized = false

-- Utility Functions
local function DraggingEnabled(frame)
    local dragToggle = nil
    local dragInput = nil
    local dragStart = nil
    local startPos = nil
    
    local function UpdateDrag(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    frame.InputBegan:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then
            dragToggle = true
            dragStart = input.Position
            startPos = frame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragToggle = false
                end
            end)
        end
    end)
    
    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragToggle then
            UpdateDrag(input)
        end
    end)
end

local function RoundNumber(num, decimalPlaces)
    local mult = 10^(decimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end

local function CreateTween(instance, properties, duration, style, direction)
    style = style or Enum.EasingStyle.Sine
    direction = direction or Enum.EasingDirection.Out
    
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration, style, direction),
        properties
    )
    
    return tween
end

-- Core Functions
function CleanUI:CreateWindow(windowConfig)
    Config.WindowName = windowConfig.Name or Config.WindowName
    Config.Color = windowConfig.Color or Config.Color
    Config.Keybind = windowConfig.Keybind or Config.Keybind
    
    -- Create main GUI
    ScreenGui.Name = "CleanUI"
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    Main.Name = "Main"
    Main.Parent = ScreenGui
    Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, -300, 0.5, -200)
    Main.Size = UDim2.new(0, 600, 0, 400)
    Main.ClipsDescendants = true
    
    -- Create rounded corners
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, 8)
    Corner.Parent = Main
    
    -- Create shadow
    local Shadow = Instance.new("ImageLabel")
    Shadow.Name = "Shadow"
    Shadow.Parent = Main
    Shadow.BackgroundTransparency = 1
    Shadow.Position = UDim2.new(0, -15, 0, -15)
    Shadow.Size = UDim2.new(1, 30, 1, 30)
    Shadow.ZIndex = -1
    Shadow.Image = "rbxassetid://5028857084"
    Shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    Shadow.ScaleType = Enum.ScaleType.Slice
    Shadow.SliceCenter = Rect.new(24, 24, 276, 276)
    Shadow.ImageTransparency = 0.5
    
    -- Create titlebar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Parent = Main
    TitleBar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TitleBar.BorderSizePixel = 0
    TitleBar.Size = UDim2.new(1, 0, 0, 40)
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 8)
    TitleCorner.Parent = TitleBar
    
    local TitleFix = Instance.new("Frame")
    TitleFix.Name = "TitleFix"
    TitleFix.Parent = TitleBar
    TitleFix.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    TitleFix.BorderSizePixel = 0
    TitleFix.Position = UDim2.new(0, 0, 0.5, 0)
    TitleFix.Size = UDim2.new(1, 0, 0.5, 0)
    
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = TitleBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 15, 0, 0)
    Title.Size = UDim2.new(1, -30, 1, 0)
    Title.Font = Enum.Font.GothamBold
    Title.Text = Config.WindowName
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left
    
    -- Create close button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TitleBar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -35, 0, 5)
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Text = "âœ•"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 18
    CloseButton.ZIndex = 2
    
    CloseButton.MouseEnter:Connect(function()
        CloseButton.TextColor3 = Color3.fromRGB(255, 75, 75)
    end)
    
    CloseButton.MouseLeave:Connect(function()
        CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)
    
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
        if ToggleConnection then
            ToggleConnection:Disconnect()
        end
        if DragConnection then
            DragConnection:Disconnect()
        end
    end)
    
    -- Create minimize button
    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.Parent = TitleBar
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Position = UDim2.new(1, -65, 0, 5)
    MinimizeButton.Size = UDim2.new(0, 30, 0, 30)
    MinimizeButton.Font = Enum.Font.GothamBold
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizeButton.TextSize = 24
    MinimizeButton.ZIndex = 2
    
    MinimizeButton.MouseEnter:Connect(function()
        MinimizeButton.TextColor3 = Color3.fromRGB(200, 200, 200)
    end)
    
    MinimizeButton.MouseLeave:Connect(function()
        MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    end)
    
    MinimizeButton.MouseButton1Click:Connect(function()
        Minimized = not Minimized
        if Minimized then
            CreateTween(Main, {Size = UDim2.new(0, 600, 0, 40)}, 0.3):Play()
        else
            CreateTween(Main, {Size = UDim2.new(0, 600, 0, 400)}, 0.3):Play()
        end
    end)
    
    -- Create TabsContainer
    local TabsContainer = Instance.new("Frame")
    TabsContainer.Name = "TabsContainer"
    TabsContainer.Parent = Main
    TabsContainer.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    TabsContainer.BorderSizePixel = 0
    TabsContainer.Position = UDim2.new(0, 0, 0, 40)
    TabsContainer.Size = UDim2.new(0, 150, 1, -40)
    
    local TabsListLayout = Instance.new("UIListLayout")
    TabsListLayout.Parent = TabsContainer
    TabsListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabsListLayout.Padding = UDim.new(0, 5)
    
    local TabsPadding = Instance.new("UIPadding")
    TabsPadding.Parent = TabsContainer
    TabsPadding.PaddingTop = UDim.new(0, 10)
    TabsPadding.PaddingLeft = UDim.new(0, 5)
    TabsPadding.PaddingRight = UDim.new(0, 5)
    
    -- Create TabsContent
    local TabsContent = Instance.new("Frame")
    TabsContent.Name = "TabsContent"
    TabsContent.Parent = Main
    TabsContent.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TabsContent.BorderSizePixel = 0
    TabsContent.Position = UDim2.new(0, 150, 0, 40)
    TabsContent.Size = UDim2.new(1, -150, 1, -40)
    
    -- Make the UI draggable
    DraggingEnabled(Main)
    
    -- Create toggle keybind
    ToggleConnection = UserInputService.InputBegan:Connect(function(input)
        if input.KeyCode == Config.Keybind then
            ScreenGui.Enabled = not ScreenGui.Enabled
        end
    end)
    
    -- Create window object
    local window = {
        Tabs = {},
        TabsContent = TabsContent,
        TabsContainer = TabsContainer
    }
    
    -- Create first tab function
    function window:CreateTab(tabName)
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabName
        TabButton.Parent = TabsContainer
        TabButton.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(1, 0, 0, 40)
        TabButton.Font = Enum.Font.Gotham
        TabButton.Text = tabName
        TabButton.TextColor3 = Color3.fromRGB(200, 200, 200)
        TabButton.TextSize = 14
        
        local TabCorner = Instance.new("UICorner")
        TabCorner.CornerRadius = UDim.new(0, 6)
        TabCorner.Parent = TabButton
        
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = tabName .. "Content"
        TabContent.Parent = TabsContent
        TabContent.BackgroundTransparency = 1
        TabContent.Size = UDim2.new(1, 0, 1, 0)
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.ScrollBarThickness = 4
        TabContent.ScrollBarImageColor3 = Config.Color
        TabContent.Visible = false
        
        local ContentLayout = Instance.new("UIListLayout")
        ContentLayout.Parent = TabContent
        ContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        ContentLayout.Padding = UDim.new(0, 10)
        
        local ContentPadding = Instance.new("UIPadding")
        ContentPadding.Parent = TabContent
        ContentPadding.PaddingTop = UDim.new(0, 10)
        ContentPadding.PaddingLeft = UDim.new(0, 10)
        ContentPadding.PaddingRight = UDim.new(0, 10)
        ContentPadding.PaddingBottom = UDim.new(0, 10)
        
        -- Auto-size the canvas
        ContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentLayout.AbsoluteContentSize.Y + 20)
        end)
        
        -- Make first tab active
        if #window.Tabs == 0 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = Config.Color
            TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        end
        
        -- Handle tab switching
        TabButton.MouseButton1Click:Connect(function()
            for _, tab in pairs(window.Tabs) do
                tab.Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                tab.Button.TextColor3 = Color3.fromRGB(200, 200, 200)
                tab.Content.Visible = false
            end
            
            TabButton.BackgroundColor3 = Config.Color
            TabButton.TextColor3 = Color3.fromRGB(255, 255, 255)
            TabContent.Visible = true
        end)
        
        -- Add tab to tabs table
        local tab = {
            Button = TabButton,
            Content = TabContent
        }
        table.insert(window.Tabs, tab)
        
        -- Element creation functions
        local elements = {}
        
        -- Create section function
        function elements:CreateSection(sectionName)
            local Section = Instance.new("Frame")
            Section.Name = sectionName .. "Section"
            Section.Parent = TabContent
            Section.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
            Section.BorderSizePixel = 0
            Section.Size = UDim2.new(1, 0, 0, 40)
            Section.AutomaticSize = Enum.AutomaticSize.Y
            
            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = UDim.new(0, 6)
            SectionCorner.Parent = Section
            
            local SectionTitle = Instance.new("TextLabel")
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Position = UDim2.new(0, 10, 0, 0)
            SectionTitle.Size = UDim2.new(1, -20, 0, 30)
            SectionTitle.Font = Enum.Font.GothamBold
            SectionTitle.Text = sectionName
            SectionTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
            SectionTitle.TextSize = 14
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "SectionContent"
            SectionContent.Parent = Section
            SectionContent.BackgroundTransparency = 1
            SectionContent.Position = UDim2.new(0, 0, 0, 30)
            SectionContent.Size = UDim2.new(1, 0, 0, 0)
            SectionContent.AutomaticSize = Enum.AutomaticSize.Y
            
            local SectionLayout = Instance.new("UIListLayout")
            SectionLayout.Parent = SectionContent
            SectionLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionLayout.Padding = UDim.new(0, 8)
            
            local SectionPadding = Instance.new("UIPadding")
            SectionPadding.Parent = SectionContent
            SectionPadding.PaddingLeft = UDim.new(0, 10)
            SectionPadding.PaddingRight = UDim.new(0, 10)
            SectionPadding.PaddingBottom = UDim.new(0, 10)
            
            -- Make section auto-size
            SectionLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                SectionContent.Size = UDim2.new(1, 0, 0, SectionLayout.AbsoluteContentSize.Y + 10)
            end)
            
            -- Section elements
            local sectionElements = {}
            
            -- Create button function
            function sectionElements:CreateButton(buttonConfig)
                local Button = Instance.new("TextButton")
                Button.Name = buttonConfig.Name .. "Button"
                Button.Parent = SectionContent
                Button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                Button.BorderSizePixel = 0
                Button.Size = UDim2.new(1, 0, 0, 35)
                Button.Font = Enum.Font.Gotham
                Button.Text = buttonConfig.Name
                Button.TextColor3 = Color3.fromRGB(255, 255, 255)
                Button.TextSize = 14
                
                local ButtonCorner = Instance.new("UICorner")
                ButtonCorner.CornerRadius = UDim.new(0, 6)
                ButtonCorner.Parent = Button
                
                -- Button hover & click effects
                Button.MouseEnter:Connect(function()
                    CreateTween(Button, {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}, 0.2):Play()
                end)
                
                Button.MouseLeave:Connect(function()
                    CreateTween(Button, {BackgroundColor3 = Color3.fromRGB(45, 45, 45)}, 0.2):Play()
                end)
                
                Button.MouseButton1Down:Connect(function()
                    CreateTween(Button, {BackgroundColor3 = Config.Color}, 0.1):Play()
                end)
                
                Button.MouseButton1Up:Connect(function()
                    CreateTween(Button, {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}, 0.1):Play()
                end)
                
                Button.MouseButton1Click:Connect(function()
                    if buttonConfig.Callback then
                        buttonConfig.Callback()
                    end
                end)
                
                return Button
            end
            
            -- Create toggle function
            function sectionElements:CreateToggle(toggleConfig)
                local ToggleFrame = Instance.new("Frame")
                ToggleFrame.Name = toggleConfig.Name .. "Toggle"
                ToggleFrame.Parent = SectionContent
                ToggleFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                ToggleFrame.BorderSizePixel = 0
                ToggleFrame.Size = UDim2.new(1, 0, 0, 35)
                
                local ToggleCorner = Instance.new("UICorner")
                ToggleCorner.CornerRadius = UDim.new(0, 6)
                ToggleCorner.Parent = ToggleFrame
                
                local ToggleTitle = Instance.new("TextLabel")
                ToggleTitle.Name = "ToggleTitle"
                ToggleTitle.Parent = ToggleFrame
                ToggleTitle.BackgroundTransparency = 1
                ToggleTitle.Position = UDim2.new(0, 10, 0, 0)
                ToggleTitle.Size = UDim2.new(1, -60, 1, 0)
                ToggleTitle.Font = Enum.Font.Gotham
                ToggleTitle.Text = toggleConfig.Name
                ToggleTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                ToggleTitle.TextSize = 14
                ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local ToggleButton = Instance.new("Frame")
                ToggleButton.Name = "ToggleButton"
                ToggleButton.Parent = ToggleFrame
                ToggleButton.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                ToggleButton.BorderSizePixel = 0
                ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
                ToggleButton.Size = UDim2.new(0, 40, 0, 20)
                
                local ToggleButtonCorner = Instance.new("UICorner")
                ToggleButtonCorner.CornerRadius = UDim.new(1, 0)
                ToggleButtonCorner.Parent = ToggleButton
                
                local ToggleCircle = Instance.new("Frame")
                ToggleCircle.Name = "ToggleCircle"
                ToggleCircle.Parent = ToggleButton
                ToggleCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleCircle.BorderSizePixel = 0
                ToggleCircle.Position = UDim2.new(0, 2, 0.5, -8)
                ToggleCircle.Size = UDim2.new(0, 16, 0, 16)
                
                local ToggleCircleCorner = Instance.new("UICorner")
                ToggleCircleCorner.CornerRadius = UDim.new(1, 0)
                ToggleCircleCorner.Parent = ToggleCircle
                
                -- Toggle functionality
                local toggled = toggleConfig.Default or false
                
                local function UpdateToggle()
                    if toggled then
                        CreateTween(ToggleCircle, {Position = UDim2.new(1, -18, 0.5, -8)}, 0.2):Play()
                        CreateTween(ToggleButton, {BackgroundColor3 = Config.Color}, 0.2):Play()
                    else
                        CreateTween(ToggleCircle, {Position = UDim2.new(0, 2, 0.5, -8)}, 0.2):Play()
                        CreateTween(ToggleButton, {BackgroundColor3 = Color3.fromRGB(25, 25, 25)}, 0.2):Play()
                    end
                    
                    if toggleConfig.Callback then
                        toggleConfig.Callback(toggled)
                    end
                end
                
                -- Set default state
                UpdateToggle()
                
                -- Click functionality
                ToggleFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        toggled = not toggled
                        UpdateToggle()
                    end
                end)
                
                -- External toggle function
                local toggleFunctions = {}
                
                function toggleFunctions:Set(value)
                    toggled = value
                    UpdateToggle()
                end
                
                return toggleFunctions
            end
            
            -- Create slider function
            function sectionElements:CreateSlider(sliderConfig)
                local SliderFrame = Instance.new("Frame")
                SliderFrame.Name = sliderConfig.Name .. "Slider"
                SliderFrame.Parent = SectionContent
                SliderFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                SliderFrame.BorderSizePixel = 0
                SliderFrame.Size = UDim2.new(1, 0, 0, 50)
                
                local SliderCorner = Instance.new("UICorner")
                SliderCorner.CornerRadius = UDim.new(0, 6)
                SliderCorner.Parent = SliderFrame
                
                local SliderTitle = Instance.new("TextLabel")
                SliderTitle.Name = "SliderTitle"
                SliderTitle.Parent = SliderFrame
                SliderTitle.BackgroundTransparency = 1
                SliderTitle.Position = UDim2.new(0, 10, 0, 0)
                SliderTitle.Size = UDim2.new(1, -20, 0, 25)
                SliderTitle.Font = Enum.Font.Gotham
                SliderTitle.Text = sliderConfig.Name
                SliderTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderTitle.TextSize = 14
                SliderTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local SliderValue = Instance.new("TextLabel")
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = SliderFrame
                SliderValue.BackgroundTransparency = 1
                SliderValue.Position = UDim2.new(1, -60, 0, 0)
                SliderValue.Size = UDim2.new(0, 50, 0, 25)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(sliderConfig.Default or sliderConfig.Min)
                SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.TextSize = 14
                SliderValue.TextXAlignment = Enum.TextXAlignment.Right
                
                local SliderBG = Instance.new("Frame")
                SliderBG.Name = "SliderBG"
                SliderBG.Parent = SliderFrame
                SliderBG.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
                SliderBG.BorderSizePixel = 0
                SliderBG.Position = UDim2.new(0, 10, 0, 35)
                SliderBG.Size = UDim2.new(1, -20, 0, 5)
                
                local SliderBGCorner = Instance.new("UICorner")
                SliderBGCorner.CornerRadius = UDim.new(0, 3)
                SliderBGCorner.Parent = SliderBG
                
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBG
                SliderFill.BackgroundColor3 = Config.Color
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new(0, 0, 1, 0)
                
                local SliderFillCorner = Instance.new("UICorner")
                SliderFillCorner.CornerRadius = UDim.new(0, 3)
                SliderFillCorner.Parent = SliderFill
                
                local SliderCircle = Instance.new("Frame")
                SliderCircle.Name = "SliderCircle"
                SliderCircle.Parent = SliderFill
                SliderCircle.AnchorPoint = Vector2.new(0.5, 0.5)
                SliderCircle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderCircle.BorderSizePixel = 0
                SliderCircle.Position = UDim2.new(1, 0, 0.5, 0)
                SliderCircle.Size = UDim2.new(0, 15, 0, 15)
                
                local SliderCircleCorner = Instance.new("UICorner")
                SliderCircleCorner.CornerRadius = UDim.new(1, 0)
                SliderCircleCorner.Parent = SliderCircle
                
                -- Slider functionality
                local min = sliderConfig.Min or 0
                local max = sliderConfig.Max or 100
                local value = sliderConfig.Default or min
                local decimals = sliderConfig.Decimals or 0
                
                local function UpdateSlider(newValue)
                    value = math.clamp(newValue, min, max)
                    value = RoundNumber(value, decimals)
                    
                    local percent = (value - min) / (max - min)
                    SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                    SliderValue.Text = tostring(value)
                    
                    if sliderConfig.Callback then
                        sliderConfig.Callback(value)
                    end
                end
                
                -- Set default value
                UpdateSlider(value)
                
                -- Slider interaction
                local dragging = false
                
                SliderFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        
                        local mousePos = UserInputService:GetMouseLocation()
                        local framePos = SliderBG.AbsolutePosition
                        local frameSize = SliderBG.AbsoluteSize
                        
                        local relPos = (mousePos.X - framePos.X) / frameSize.X
                        local newValue = min + (max - min) * relPos
                        
                        UpdateSlider(newValue)
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                        local mousePos = UserInputService:GetMouseLocation()
                        local framePos = SliderBG.AbsolutePosition
                        local frameSize = SliderBG.AbsoluteSize
                        
                        local relPos = (mousePos.X - framePos.X) / frameSize.X
                        local newValue = min + (max - min) * relPos
                        
                        UpdateSlider(newValue)
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                -- External set function
                local sliderFunctions = {}
                
                function sliderFunctions:Set(newValue)
                    UpdateSlider(newValue)
                end
                
                return sliderFunctions
            end
            
            -- Create dropdown function
            function sectionElements:CreateDropdown(dropdownConfig)
                local DropdownFrame = Instance.new("Frame")
                DropdownFrame.Name = dropdownConfig.Name .. "Dropdown"
                DropdownFrame.Parent = SectionContent
                DropdownFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                DropdownFrame.BorderSizePixel = 0
                DropdownFrame.Size = UDim2.new(1, 0, 0, 35)
                DropdownFrame.ClipsDescendants = true
                
                local DropdownCorner = Instance.new("UICorner")
                DropdownCorner.CornerRadius = UDim.new(0, 6)
                DropdownCorner.Parent = DropdownFrame
                
                local DropdownTitle = Instance.new("TextLabel")
                DropdownTitle.Name = "DropdownTitle"
                DropdownTitle.Parent = DropdownFrame
                DropdownTitle.BackgroundTransparency = 1
                DropdownTitle.Position = UDim2.new(0, 10, 0, 0)
                DropdownTitle.Size = UDim2.new(1, -60, 0, 35)
                DropdownTitle.Font = Enum.Font.Gotham
                DropdownTitle.Text = dropdownConfig.Name
                DropdownTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownTitle.TextSize = 14
                DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local DropdownArrow = Instance.new("TextLabel")
                DropdownArrow.Name = "DropdownArrow"
                DropdownArrow.Parent = DropdownFrame
                DropdownArrow.BackgroundTransparency = 1
                DropdownArrow.Position = UDim2.new(1, -30, 0, 0)
                DropdownArrow.Size = UDim2.new(0, 20, 0, 35)
                DropdownArrow.Font = Enum.Font.Gotham
                DropdownArrow.Text = "â–¼"
                DropdownArrow.TextColor3 = Color3.fromRGB(255, 255, 255)
                DropdownArrow.TextSize = 14
                DropdownArrow.TextXAlignment = Enum.TextXAlignment.Right
                
                local DropdownContent = Instance.new("Frame")
                DropdownContent.Name = "DropdownContent"
                DropdownContent.Parent = DropdownFrame
                DropdownContent.BackgroundTransparency = 1
                DropdownContent.Position = UDim2.new(0, 0, 0, 35)
                DropdownContent.Size = UDim2.new(1, 0, 0, 0)
                
                local DropdownContentLayout = Instance.new("UIListLayout")
                DropdownContentLayout.Parent = DropdownContent
                DropdownContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownContentLayout.Padding = UDim.new(0, 5)
                
                local DropdownContentPadding = Instance.new("UIPadding")
                DropdownContentPadding.Parent = DropdownContent
                DropdownContentPadding.PaddingLeft = UDim.new(0, 5)
                DropdownContentPadding.PaddingRight = UDim.new(0, 5)
                DropdownContentPadding.PaddingBottom = UDim.new(0, 5)
                
                -- Dropdown functionality
                local options = dropdownConfig.Options or {}
                local expanded = false
                local selectedOption = dropdownConfig.Default or options[1] or "Select"
                local selectedOptionIndex = 1
                
                for i, option in ipairs(options) do
                    if option == selectedOption then
                        selectedOptionIndex = i
                        break
                    end
                end
                
                DropdownTitle.Text = dropdownConfig.Name .. ": " .. selectedOption
                
                local function UpdateDropdown()
                    if expanded then
                        CreateTween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 35 + DropdownContentLayout.AbsoluteContentSize.Y + 10)}, 0.2):Play()
                        CreateTween(DropdownArrow, {Rotation = 180}, 0.2):Play()
                    else
                        CreateTween(DropdownFrame, {Size = UDim2.new(1, 0, 0, 35)}, 0.2):Play()
                        CreateTween(DropdownArrow, {Rotation = 0}, 0.2):Play()
                    end
                end
                
                -- Create option buttons
                for i, option in ipairs(options) do
                    local OptionButton = Instance.new("TextButton")
                    OptionButton.Name = option .. "Option"
                    OptionButton.Parent = DropdownContent
                    OptionButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                    OptionButton.BorderSizePixel = 0
                    OptionButton.Size = UDim2.new(1, 0, 0, 30)
                    OptionButton.Font = Enum.Font.Gotham
                    OptionButton.Text = option
                    OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                    OptionButton.TextSize = 14
                    
                    local OptionCorner = Instance.new("UICorner")
                    OptionCorner.CornerRadius = UDim.new(0, 6)
                    OptionCorner.Parent = OptionButton
                    
                    if i == selectedOptionIndex then
                        OptionButton.BackgroundColor3 = Config.Color
                    end
                    
                    OptionButton.MouseEnter:Connect(function()
                        if i ~= selectedOptionIndex then
                            CreateTween(OptionButton, {BackgroundColor3 = Color3.fromRGB(55, 55, 55)}, 0.2):Play()
                        end
                    end)
                    
                    OptionButton.MouseLeave:Connect(function()
                        if i ~= selectedOptionIndex then
                            CreateTween(OptionButton, {BackgroundColor3 = Color3.fromRGB(35, 35, 35)}, 0.2):Play()
                        end
                    end)
                    
                    OptionButton.MouseButton1Click:Connect(function()
                        for _, button in ipairs(DropdownContent:GetChildren()) do
                            if button:IsA("TextButton") then
                                CreateTween(button, {BackgroundColor3 = Color3.fromRGB(35, 35, 35)}, 0.2):Play()
                            end
                        end
                        
                        CreateTween(OptionButton, {BackgroundColor3 = Config.Color}, 0.2):Play()
                        
                        selectedOption = option
                        selectedOptionIndex = i
                        DropdownTitle.Text = dropdownConfig.Name .. ": " .. selectedOption
                        
                        expanded = false
                        UpdateDropdown()
                        
                        if dropdownConfig.Callback then
                            dropdownConfig.Callback(selectedOption)
                        end
                    end)
                end
                
                -- Toggle dropdown
                DropdownFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position.Y - DropdownFrame.AbsolutePosition.Y < 35 then
                        expanded = not expanded
                        UpdateDropdown()
                    end
                end)
                
                -- External functions
                local dropdownFunctions = {}
                
                function dropdownFunctions:Set(option)
                    for i, opt in ipairs(options) do
                        if opt == option then
                            for _, button in ipairs(DropdownContent:GetChildren()) do
                                if button:IsA("TextButton") then
                                    if button.Name == option .. "Option" then
                                        CreateTween(button, {BackgroundColor3 = Config.Color}, 0.2):Play()
                                    else
                                        CreateTween(button, {BackgroundColor3 = Color3.fromRGB(35, 35, 35)}, 0.2):Play()
                                    end
                                end
                            end
                            
                            selectedOption = option
                            selectedOptionIndex = i
                            DropdownTitle.Text = dropdownConfig.Name .. ": " .. selectedOption
                            
                            if dropdownConfig.Callback then
                                dropdownConfig.Callback(selectedOption)
                            end
                            break
                        end
                    end
                end
                
                return dropdownFunctions
            end
            
            -- Create input field function
            function sectionElements:CreateInput(inputConfig)
                local InputFrame = Instance.new("Frame")
                InputFrame.Name = inputConfig.Name .. "Input"
                InputFrame.Parent = SectionContent
                InputFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                InputFrame.BorderSizePixel = 0
                InputFrame.Size = UDim2.new(1, 0, 0, 35)
                
                local InputCorner = Instance.new("UICorner")
                InputCorner.CornerRadius = UDim.new(0, 6)
                InputCorner.Parent = InputFrame
                
                local InputTitle = Instance.new("TextLabel")
                InputTitle.Name = "InputTitle"
                InputTitle.Parent = InputFrame
                InputTitle.BackgroundTransparency = 1
                InputTitle.Position = UDim2.new(0, 10, 0, 0)
                InputTitle.Size = UDim2.new(0.5, -10, 1, 0)
                InputTitle.Font = Enum.Font.Gotham
                InputTitle.Text = inputConfig.Name
                InputTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                InputTitle.TextSize = 14
                InputTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local InputBox = Instance.new("TextBox")
                InputBox.Name = "InputBox"
                InputBox.Parent = InputFrame
                InputBox.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                InputBox.BorderSizePixel = 0
                InputBox.Position = UDim2.new(0.5, 0, 0.5, -12)
                InputBox.Size = UDim2.new(0.5, -10, 0, 24)
                InputBox.Font = Enum.Font.Gotham
                InputBox.PlaceholderText = inputConfig.PlaceholderText or "Enter text..."
                InputBox.Text = inputConfig.Default or ""
                InputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                InputBox.TextSize = 14
                InputBox.TextTruncate = Enum.TextTruncate.AtEnd
                InputBox.ClearTextOnFocus = inputConfig.ClearOnFocus or false
                
                local InputBoxCorner = Instance.new("UICorner")
                InputBoxCorner.CornerRadius = UDim.new(0, 6)
                InputBoxCorner.Parent = InputBox
                
                local text = inputConfig.Default or ""
                
                InputBox.FocusLost:Connect(function(enterPressed)
                    text = InputBox.Text
                    
                    if inputConfig.Callback then
                        inputConfig.Callback(text)
                    end
                end)
                
                -- External functions
                local inputFunctions = {}
                
                function inputFunctions:GetText()
                    return text
                end
                
                function inputFunctions:SetText(newText)
                    text = newText
                    InputBox.Text = newText
                    
                    if inputConfig.Callback then
                        inputConfig.Callback(text)
                    end
                end
                
                return inputFunctions
            end
            
            -- Create label function
            function sectionElements:CreateLabel(labelConfig)
                local LabelFrame = Instance.new("Frame")
                LabelFrame.Name = "Label"
                LabelFrame.Parent = SectionContent
                LabelFrame.BackgroundTransparency = 1
                LabelFrame.Size = UDim2.new(1, 0, 0, 25)
                
                local LabelText = Instance.new("TextLabel")
                LabelText.Name = "LabelText"
                LabelText.Parent = LabelFrame
                LabelText.BackgroundTransparency = 1
                LabelText.Size = UDim2.new(1, 0, 1, 0)
                LabelText.Font = Enum.Font.Gotham
                LabelText.Text = labelConfig.Text or "Label"
                LabelText.TextColor3 = Color3.fromRGB(255, 255, 255)
                LabelText.TextSize = 14
                LabelText.TextWrapped = true
                
                -- Resize based on text
                LabelText:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    LabelFrame.Size = UDim2.new(1, 0, 0, LabelText.TextBounds.Y + 5)
                end)
                
                -- External functions
                local labelFunctions = {}
                
                function labelFunctions:SetText(newText)
                    LabelText.Text = newText
                end
                
                return labelFunctions
            end
            
            -- Create keybind function
            function sectionElements:CreateKeybind(keybindConfig)
                local KeybindFrame = Instance.new("Frame")
                KeybindFrame.Name = keybindConfig.Name .. "Keybind"
                KeybindFrame.Parent = SectionContent
                KeybindFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                KeybindFrame.BorderSizePixel = 0
                KeybindFrame.Size = UDim2.new(1, 0, 0, 35)
                
                local KeybindCorner = Instance.new("UICorner")
                KeybindCorner.CornerRadius = UDim.new(0, 6)
                KeybindCorner.Parent = KeybindFrame
                
                local KeybindTitle = Instance.new("TextLabel")
                KeybindTitle.Name = "KeybindTitle"
                KeybindTitle.Parent = KeybindFrame
                KeybindTitle.BackgroundTransparency = 1
                KeybindTitle.Position = UDim2.new(0, 10, 0, 0)
                KeybindTitle.Size = UDim2.new(0.5, -10, 1, 0)
                KeybindTitle.Font = Enum.Font.Gotham
                KeybindTitle.Text = keybindConfig.Name
                KeybindTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                KeybindTitle.TextSize = 14
                KeybindTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local KeybindButton = Instance.new("TextButton")
                KeybindButton.Name = "KeybindButton"
                KeybindButton.Parent = KeybindFrame
                KeybindButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
                KeybindButton.BorderSizePixel = 0
                KeybindButton.Position = UDim2.new(0.5, 0, 0.5, -12)
                KeybindButton.Size = UDim2.new(0.5, -10, 0, 24)
                KeybindButton.Font = Enum.Font.Gotham
                KeybindButton.Text = "..."
                KeybindButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                KeybindButton.TextSize = 14
                
                local KeybindButtonCorner = Instance.new("UICorner")
                KeybindButtonCorner.CornerRadius = UDim.new(0, 6)
                KeybindButtonCorner.Parent = KeybindButton
                
                -- Keybind functionality
                local currentKey = keybindConfig.Default or Enum.KeyCode.Unknown
                local listeningForKey = false
                
                if currentKey ~= Enum.KeyCode.Unknown then
                    KeybindButton.Text = currentKey.Name
                end
                
                KeybindButton.MouseButton1Click:Connect(function()
                    if not listeningForKey then
                        listeningForKey = true
                        KeybindButton.Text = "Press a key..."
                    end
                end)
                
                UserInputService.InputBegan:Connect(function(input)
                    if listeningForKey and input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                        KeybindButton.Text = currentKey.Name
                        listeningForKey = false
                        
                        if keybindConfig.Callback then
                            keybindConfig.Callback(currentKey)
                        end
                    elseif not listeningForKey and input.KeyCode == currentKey then
                        if keybindConfig.KeyPressed then
                            keybindConfig.KeyPressed()
                        end
                    end
                end)
                
                -- External functions
                local keybindFunctions = {}
                
                function keybindFunctions:GetKey()
                    return currentKey
                end
                
                function keybindFunctions:SetKey(newKey)
                    currentKey = newKey
                    KeybindButton.Text = currentKey.Name
                    
                    if keybindConfig.Callback then
                        keybindConfig.Callback(currentKey)
                    end
                end
                
                return keybindFunctions
            end
            
            -- Create color picker function
            function sectionElements:CreateColorPicker(colorPickerConfig)
                local ColorPickerFrame = Instance.new("Frame")
                ColorPickerFrame.Name = colorPickerConfig.Name .. "ColorPicker"
                ColorPickerFrame.Parent = SectionContent
                ColorPickerFrame.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
                ColorPickerFrame.BorderSizePixel = 0
                ColorPickerFrame.Size = UDim2.new(1, 0, 0, 35)
                ColorPickerFrame.ClipsDescendants = true
                
                local ColorPickerCorner = Instance.new("UICorner")
                ColorPickerCorner.CornerRadius = UDim.new(0, 6)
                ColorPickerCorner.Parent = ColorPickerFrame
                
                local ColorPickerTitle = Instance.new("TextLabel")
                ColorPickerTitle.Name = "ColorPickerTitle"
                ColorPickerTitle.Parent = ColorPickerFrame
                ColorPickerTitle.BackgroundTransparency = 1
                ColorPickerTitle.Position = UDim2.new(0, 10, 0, 0)
                ColorPickerTitle.Size = UDim2.new(1, -60, 0, 35)
                ColorPickerTitle.Font = Enum.Font.Gotham
                ColorPickerTitle.Text = colorPickerConfig.Name
                ColorPickerTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                ColorPickerTitle.TextSize = 14
                ColorPickerTitle.TextXAlignment = Enum.TextXAlignment.Left
                
                local ColorPreview = Instance.new("Frame")
                ColorPreview.Name = "ColorPreview"
                ColorPreview.Parent = ColorPickerFrame
                ColorPreview.BackgroundColor3 = colorPickerConfig.Default or Color3.fromRGB(255, 255, 255)
                ColorPreview.BorderSizePixel = 0
                ColorPreview.Position = UDim2.new(1, -50, 0.5, -10)
                ColorPreview.Size = UDim2.new(0, 40, 0, 20)
                
                local ColorPreviewCorner = Instance.new("UICorner")
                ColorPreviewCorner.CornerRadius = UDim.new(0, 4)
                ColorPreviewCorner.Parent = ColorPreview
                
                -- Color picker functionality
                local selectedColor = colorPickerConfig.Default or Color3.fromRGB(255, 255, 255)
                local expanded = false
                
                local function UpdateColor(color)
                    selectedColor = color
                    ColorPreview.BackgroundColor3 = selectedColor
                    
                    if colorPickerConfig.Callback then
                        colorPickerConfig.Callback(selectedColor)
                    end
                end
                
                -- Basic color choices
                local ColorPickerContent = Instance.new("Frame")
                ColorPickerContent.Name = "ColorPickerContent"
                ColorPickerContent.Parent = ColorPickerFrame
                ColorPickerContent.BackgroundTransparency = 1
                ColorPickerContent.Position = UDim2.new(0, 0, 0, 35)
                ColorPickerContent.Size = UDim2.new(1, 0, 0, 110)
                
                local function CreateColorOption(color, posX, posY)
                    local ColorOption = Instance.new("Frame")
                    ColorOption.Name = "ColorOption"
                    ColorOption.Parent = ColorPickerContent
                    ColorOption.BackgroundColor3 = color
                    ColorOption.BorderSizePixel = 0
                    ColorOption.Position = UDim2.new(0, 10 + posX, 0, 10 + posY)
                    ColorOption.Size = UDim2.new(0, 30, 0, 30)
                    
                    local ColorOptionCorner = Instance.new("UICorner")
                    ColorOptionCorner.CornerRadius = UDim.new(0, 4)
                    ColorOptionCorner.Parent = ColorOption
                    
                    ColorOption.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            UpdateColor(color)
                        end
                    end)
                    
                    return ColorOption
                end
                
                -- Create color options (4x3 grid)
                local colorOptions = {
                    Color3.fromRGB(255, 0, 0),      -- Red
                    Color3.fromRGB(255, 127, 0),    -- Orange
                    Color3.fromRGB(255, 255, 0),    -- Yellow
                    Color3.fromRGB(0, 255, 0),      -- Green
                    Color3.fromRGB(0, 255, 255),    -- Cyan
                    Color3.fromRGB(0, 0, 255),      -- Blue
                    Color3.fromRGB(255, 0, 255),    -- Magenta
                    Color3.fromRGB(255, 255, 255),  -- White
                    Color3.fromRGB(0, 0, 0),        -- Black
                    Color3.fromRGB(127, 127, 127),  -- Gray
                    Color3.fromRGB(255, 127, 127),  -- Light red
                    Color3.fromRGB(127, 127, 255)   -- Light blue
                }
                
                for i, color in ipairs(colorOptions) do
                    local row = math.floor((i-1) / 4)
                    local col = (i-1) % 4
                    CreateColorOption(color, col * 40, row * 40)
                end
                
                local function UpdateColorPicker()
                    if expanded then
                        CreateTween(ColorPickerFrame, {Size = UDim2.new(1, 0, 0, 35 + ColorPickerContent.Size.Y.Offset + 10)}, 0.2):Play()
                    else
                        CreateTween(ColorPickerFrame, {Size = UDim2.new(1, 0, 0, 35)}, 0.2):Play()
                    end
                end
                
                -- Toggle color picker
                ColorPickerFrame.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 and input.Position.Y - ColorPickerFrame.AbsolutePosition.Y < 35 then
                        expanded = not expanded
                        UpdateColorPicker()
                    end
                end)
                
                -- External functions
                local colorPickerFunctions = {}
                
                function colorPickerFunctions:SetColor(color)
                    UpdateColor(color)
                end
                
                function colorPickerFunctions:GetColor()
                    return selectedColor
                end
                
                return colorPickerFunctions
            end
            
            return sectionElements
        end
        
        return elements
    end
    
    -- Return
    Windows[Config.WindowName] = window
    return window
end

-- Return the library
return CleanUI
